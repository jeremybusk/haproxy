#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # lua-load /etc/haproxy/lua/hello.lua
    lua-load /etc/haproxy/lua/least_sessions.lua
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats

    # utilize system-wide crypto-policies
    # ssl-default-bind-ciphers PROFILE=SYSTEM
    # ssl-default-bind-ciphers TLSv1+HIGH:!aNULL:!eNULL:!3DES:!RC4:!CAMELLIA:!DH:!kECDHE:@STRENGTH no-sslv3 no-tlsv10
    # ssl-default-bind-ciphers TLSv1+HIGH:!aNULL:!eNULL:!3DES:!RC4:!CAMELLIA:!DH:!kECDHE:@STRENGTH no-sslv3 no-tlsv10
   # ssl-default-bind-ciphers TLSv1+HIGH:!aNULL:!eNULL:!3DES:!RC4:!CAMELLIA:!DH:!kECDHE:@STRENGTH no-sslv3 no-tlsv10
   # ssl-default-bind-ciphers TLSv1+HIGH:!aNULL:!eNULL:!3DES:!RC4:!CAMELLIA:!DH:!kECDHE:@STRENGTH no-sslv3 no-tlsv10
    # ssl-default-server-options force-tlsv12
           ssl-default-bind-ciphers TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:TLS13-CHACHA20-POLY1305-SHA256:EECDH+AESGCM:EECDH+CHACHA20
        ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11

           ssl-default-server-ciphers TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:TLS13-CHACHA20-POLY1305-SHA256:EECDH+AESGCM:EECDH+CHACHA20
    # ssl-default-server-ciphers PROFILE=SYSTEM

tune.ssl.default-dh-param 2048
# ssl-default-bind-options no-sslv3, no-tlsv1.0

    # ca-base /etc/haproxy/pki/certs
    ca-base /etc/haproxy/pki/server.crt
    crt-base /etc/haproxypki/server.key

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
frontend main
    bind *:5000
    acl url_static       path_beg       -i /static /images /javascript /stylesheets
    acl url_static       path_end       -i .jpg .gif .png .css .js

    use_backend static          if url_static
    default_backend             app

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
backend static
    balance     roundrobin
    server      static 127.0.0.1:4331 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend app
    balance     roundrobin
    server  app1 127.0.0.1:5001 check
    server  app2 127.0.0.1:5002 check
    server  app3 127.0.0.1:5003 check
    server  app4 127.0.0.1:5004 check



# frontend frontend_server
#       # bind :10080
#       bind *:10080
#       # bind *:10443
#       bind *:10443 ssl crt /etc/haproxy/pki/server.pem
#         # bind :::10080 v4v6
#         # bind :::10443 v4v6
#       # mode http
#         # redirect scheme https if !https sensitive_folder
#         # redirect scheme https if !https sensitive_folder
#         # redirect scheme https code 301 if !{ ssl_fc }
#         # acl https ssl_fc
#       # acl secure dst_port eq 10443
#       # redirect scheme https if !{ ssl_fc }
#       # mode tcp
#       mode http
#         redirect scheme https code 301 if !{ ssl_fc }
#       default_backend backend_server
#

# frontend ft_global
#  acl host_dom.com    req.hdr(Host) dom.com
#  acl path_mirror_foo path -m beg   /mirror/foo/
#  use_backend bk_myapp if host_dom.com path_mirror_foo

# frontend httpfront
#     mode http
#     bind *:10080
#     redirect scheme https code 301 if !{ ssl_fc }

frontend httpsfront
    mode http
    # mode tcp
    # bind *:10443
    bind *:10443 ssl crt /etc/haproxy/pki/server.pem
    # acl hello payload(0,6) -m bin 48656c6c6f0a
    # default_backend repo
    # acl host_jtest.com    req.hdr(Host) jtest.com
    # acl host_www.example.com    req.hdr(Host) www.example.com
    acl host_www    hdr_beg(host) -i wwwX
    # acl path_mirror_foo path -m beg   /mirror/foo/
    # use_backend repo if host_jtest.com path_mirror_foo
    # use_backend repo if host_jtest.com
    # use_backend repo if host_www.example.com
    use_backend repo if host_www
    # use_backend repo if { hdr(Host) -i www.example.com www.example.com:10444 www.example.com* }
    use_backend repo if { hdr(Host) -i www.example.com www.example.com:10444 www.example.com* }
    use_backend repo if { hdr_sub(host) -i www.example.com }
    # use_backend repo if { hdr_end(host) -i www.example.com }
# acl valid_domains hdr_end(host) -i mysite.com
# redirect location http://mysite.com/invalid_domain if !valid_domains


# backend backend_server
backend repo
        mode http
        # balance roundrobin
        balance source
        hash-type consistent
        # server server0 172.17.0.1:1234 check
        option tcp-check
        server repo 172.16.0.41:80 check port 80
        server repo1 172.16.0.130:80 check port 80
# server-template web 5 myservice.example.local:80 check resolvers mydns init-addr none

frontend www
    bind :10080
    # bind *:10443 ssl crt /etc/haproxy/pki/server.pem
    use_backend %[lua.leastsess_backend]

backend www_dc1
    balance roundrobin
    # server server1 192.168.10.5:8080 check maxconn 30
    server server1 172.16.0.41:80 check maxconn 30

backend www_dc2
    balance roundrobin
    # server server1 192.168.11.5:8080 check maxconn 30
    # server server1 192.168.11.5:8080 check maxconn 30
    server server1 172.16.0.130:80 check maxconn 30
